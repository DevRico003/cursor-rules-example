
# Tech Stack Standards

## Description
This rule defines the technology stack standards and best practices for the Central Operations Dashboard (COD) project.

## Severity
info

## Message
Follow established tech stack standards when developing or modifying components.

## Explanation

### Core Technologies
- **Kubernetes/Helm**: Used for deployment and orchestration
- **Docker**: All components are containerized
- **Microservices Architecture**: Components are separated by responsibility

### Frontend Standards
- All frontends should use consistent styling and component libraries
- Follow responsive design principles
- Implement proper error handling and loading states
- Use API abstractions to isolate backend calls

### Backend Standards
- RESTful API design principles should be followed
- Implement proper error handling and logging
- Services should be stateless when possible
- Use environment variables for configuration

### Database Standards
- MariaDB is the primary database
- Use migrations for database schema changes
- Avoid direct database access from frontend code
- Follow proper indexing practices

### Security Practices
- No hardcoded credentials in the codebase
- All sensitive configuration should be properly encrypted
- Use proper authentication and authorization
- Follow principle of least privilege

### Module Integration
- Modules (NAC, Backup, VMware) should follow consistent integration patterns
- Use well-defined APIs for inter-module communication
- Follow established event/message patterns when applicable

### Docker Images
- Use the established registry pattern (registry.extoco.de/central-operations-dashboard/*)
- Keep image sizes minimal
- Use multi-stage builds where appropriate
- Tag images appropriately for versioning
